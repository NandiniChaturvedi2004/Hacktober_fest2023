#include <iostream>
using namespace std;
//8 10 1 -1 -1 6 4 -1 -1 7 -1 -1 3 -1 14 13 -1 -1 -1

class node{
public:
    int data;
    node* left , *right;
    node(int d): data(d) , left(NULL) , right(NULL){}
};

node* CreateTree()
{
 node* root=NULL;
 int data;
 cin>>data;

 if(data==-1)
    return root;
 else{
    root=new node(data);
    root->left=CreateTree();
    root->right=CreateTree();
    }
 return root;
}


void preorder(node* root)
{
    //base case
    if(root==NULL)
     return;

 //recursive case
 cout<<root->data<<" ";
 preorder(root->left);
 preorder(root->right);

}

void inorder(node* root)
{

    //base case
    if(root==NULL)
     return;

 //recursive case
 inorder(root->left);
  cout<<root->data<<" ";
 inorder(root->right);
}

void postorder(node* root)
{
     //base case
    if(root==NULL)
     return;

 //recursive case
 postorder(root->left);
 postorder(root->right);
  cout<<root->data<<" ";
}

int countNodes(node* root)
{
    if(root==NULL)
    {
        return 0;
    }

    return countNodes(root->left) + countNodes(root->right)+1;
}

int height(node* root)
{
    if(root==NULL){
        return 0;
    }
    int left_height=height(root->left);
    int right_height=height(root->right);
    return max(left_height,right_height)+1;
}

int diameter(node* root){
if(root==NULL){
    return 0;
}
//DIA VIA ROOT NODE
int op1=height(root->left) + height(root->right);
//DIA VIA LST
int op2=diameter(root->left);
//DIA VIA RST
int op3=diameter(root->right);

return max(op1,max(op2,op3));
}

class Pair{
public:
    int height;
    int diameter;
};

Pair fast_dia(node* root)
{
    if(root==NULL){
        Pair p;
        p.height=p.diameter=0;
        return p ;
    }

    Pair left=fast_dia(root->left);
    Pair right=fast_dia(root->right);

    Pair p;
    p.height= max (left.height,right.height)+1;

    int op1=left.height+right.height;
    int op2=left.diameter;
    int op3=right.diameter;

    p.diameter=max(op1,max(op2,op3));
    return p;
}

node* searchBT(node* root , int key){
//base case
if(root==NULL){
    return NULL;
}

//recursive case
if(root->data==key){
    return root;
}

 node* left=searchBT(root->left,key);
if(left!=NULL){
    return left;
}

node* right=searchBT(root->right,key);
return right;
}

void mirror(node* root){
//base case
if(root==NULL){
    return ;
}
//recursive case
swap(root->left,root->right);
mirror(root->left);
mirror(root->right);
}


int main()
{
    node* root=NULL;
    root=CreateTree();
    //mirror(root);

    cout<<"PRE:";
    preorder(root);
    cout<<endl;
    cout<<"IN:";
    inorder(root);
    cout<<endl;
    cout<<"POST:";
    postorder(root);
    cout<<endl;

    cout<<"Total Nodes are:"<<countNodes(root)<<endl;
    cout<<"Height is :"<<height(root)<<endl;
    cout<<"diameter is :"<<diameter(root)<<endl;

    Pair ans=fast_dia(root);

    cout<<"Fastheight: "<<ans.height<<endl;
    cout<<"FastDia: "<<ans.diameter<<endl;

    node* x= searchBT(root,13);
    if(x!=NULL){
        cout<<"Found key: "<<x->data<<endl;
    }
    else{
        cout<<"Key not found"<<endl;
    }
   return 0;
}
